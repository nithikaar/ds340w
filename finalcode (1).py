# -*- coding: utf-8 -*-
"""Finalcode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cCtUA5D7JWpMVNo2GuHEQvn2KHe0x6oE
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score,f1_score

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

filepath='BioMarkerCSV.csv'

data=pd.read_csv(filepath)

print(data.head())

scaler=StandardScaler()
scaled_data= scaler.fit_transform(data)

data_nn=np.abs(scaled_data)

nmf_model= NMF(n_components=3, random_state=42, init='random', max_iter=500)
W=nmf_model.fit_transform(data_nn)
H=nmf_model.components_

data['Phosphatidylserine_Level']= data['Phosphatidylserine_Level'] * 0.1
X = data.drop(columns=['Phosphatidylserine_Level'])
y=data['Phosphatidylserine_Level'].apply(lambda x:1 if x>1 else 0 )
X_noisy= X + np.random.normal(0,0.3, X.shape)
X_noisy_scaled= scaler.fit_transform(X_noisy)

y_randomized=y.copy()

random_indices= np.random.choice(y.index, size=int(0.2*len(y)), replace='False')

y_randomized[random_indices]= 1-y_randomized[random_indices]
# smote

from imblearn.over_sampling import SMOTE

smote=SMOTE(random_state=42)
X_train, y_train= smote.fit_resample(X_noisy_scaled,y_randomized)

X_train, X_test, y_train, y_test= train_test_split(X_noisy_scaled, y_randomized, test_size=0.7, random_state=1000)




rf_model=RandomForestClassifier(n_estimators=500,class_weight='balanced',max_depth=2, random_state=42)

rf_model.fit(X_train, y_train)

y_pred= rf_model.predict(X_test)

accuracy=accuracy_score(y_test, y_pred)
classification_rep=classification_report(y_test, y_pred)
roc_auc=roc_auc_score(y_test, y_pred)
f1=f1_score(y_test, y_pred)
print(f'Accuraccy:{accuracy}')
print(f'Classification Report:\n{classification_rep}')
print(f'ROC AUC Score:{roc_auc}')
print(f'F1 Score:{f1}')

pca=PCA(n_components=2)
pca_data=pca.fit_transform(scaled_data)

kmeans= KMeans(n_clusters=3,random_state=42)
clusters= kmeans.fit_predict(scaled_data)

plt.figure(figsize=(8,6))
plt.scatter(pca_data[:,0],pca_data[:,1], c=clusters,cmap='viridis', s=50, alpha=0.7)

plt.colorbar(label='Cluster')

plt.title('Kmeans clustering visualization')

plt.xlabel("PC1")
plt.ylabel("PC2")
plt.show