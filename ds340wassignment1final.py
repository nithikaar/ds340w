# -*- coding: utf-8 -*-
"""DS340WAssignment1final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hCzIbRIOM-otKsfciyu1J_8YwB89uXuG
"""

pip install ucimlrepo

# taken from: https://archive.ics.uci.edu/dataset/17/breast+cancer+wisconsin+diagnostic
# where parent paper was derived

from ucimlrepo import fetch_ucirepo

# fetch dataset
breast_cancer_wisconsin_diagnostic = fetch_ucirepo(id=17)

# data (as pandas dataframes)
X = breast_cancer_wisconsin_diagnostic.data.features
y = breast_cancer_wisconsin_diagnostic.data.targets

# metadata
print(breast_cancer_wisconsin_diagnostic.metadata)

# variable information
print(breast_cancer_wisconsin_diagnostic.variables)

# Random Forest Clasification code done by Nithika Radhakrishnan

# we use random forest classigication and ensemmble learning that creates a lot of decision tries and combines the result
# this concept was taught to me in stat 380
# since its trained on a random set of data and features overfitting tends not to happen
# this model predicts whether a the test set datapoints are malignant or benign
# the roc auc score is used to show the model and how well it can choose which class




import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score

filepath='breastcancerdata.csv'

df=pd.read_csv(filepath)

print(df.head())

# Check for unamed columns


unnamed_columns = [col for col in df.columns if 'Unnamed' in col]


# get rid of the columns with nothing in this case, this includes any id which is good for cleaning purposes


cleaned_dataframe= df.drop(columns= unnamed_columns + ['id'])


x = cleaned_dataframe.drop(unnamed_columns + ['diagnosis'],axis=1) #features
y= cleaned_dataframe['diagnosis']


cleaned_dataframe=cleaned_dataframe['diagnosis'].map({'M': 1, 'B':0}) #binary of the malignant and benig


X_train, X_test,y_train,y_test= train_test_split(X,y,test_size=.2, random_state=100)

#train the model

randomforest_model = RandomForestClassifier(random_state=100)
randomforest_model.fit(X_train,y_train)

# make the predictions


y_pred= randomforest_model.predict(X_test)

# calculate the accuracy of this

accuracy= accuracy_score(y_test,y_pred)
classification= classification_report(y_test,y_pred)

roc_auc = roc_auc_score(y_test, randomforest_model.predict_proba(X_test)[:, 1])

print(f"Accuracy: {accuracy}")
print(f"Classification:{classification}")
print(f"Roc Auc Score:{roc_auc}")