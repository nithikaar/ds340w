# -*- coding: utf-8 -*-
"""RoughDraft of 340w.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JP1izCXiEmhJM8KB6elR2_lLGMGb6uB4
"""

#Group Basis and Restricted Non- Negative Matrix Factorization

import pandas as pd

# Load the dataset
data_path = "BioMarkerCSV.csv" # Replace with your file path if different
columns = ['Sample_code_number', 'Clump_Thickness', 'Uniformity_of_Cell_Size',
           'Uniformity_of_Cell_Shape', 'Marginal_Adhesion', 'Single_Epithelial_Cell_Size',
           'Bare_Nuclei', 'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class']
data = pd.read_csv(data_path,  header=None, names=columns)

# Show the first few rows of the dataset
data.head()

data['Bare_Nuclei'] = data['Bare_Nuclei'].replace('?', pd.NA)


data['Bare_Nuclei'] = pd.to_numeric(data['Bare_Nuclei'], errors='coerce')
data = data.dropna()

# Convert 'Bare_Nuclei' to numeric
data['Bare_Nuclei'] = data['Bare_Nuclei'].astype(int)

# Drop non-numeric 'Sample_code_number' as it's not needed for NMF

X = data.drop( ['Class'], axis=1)
y = data['Class']

# Print the shape of X to verify if it's non-empty
print(f'Shape of X: {X.shape}')

print(X.shape)
print(X)


# Continue with NMF
from sklearn.decomposition import NMF
import numpy as np



# Initialize NMF
n_components = 5
nmf_model = NMF(n_components=n_components, random_state=42)
# Apply NMF to the dataset
W = nmf_model.fit_transform(X)
H = nmf_model.components_

# Display the shapes of W and H
print(f'Shape of W: {W.shape}')
print(f'Shape of H: {H.shape}')

mask = np.ones_like(H)

mask[:2, :3] = 0

# Apply the mask to the NMF components after fitting
restricted_H = np.multiply(H, mask)

# Reconstruct the matrix using the restricted components
reconstructed_X = np.dot(W, restricted_H)


print(reconstructed_X[:5])

import matplotlib.pyplot as plt


plt.scatter(W[:, 0], W[:, 1], c=y)
plt.xlabel('Component 1')
plt.ylabel('Component 2')
plt.title('NMF Components Visualization')
plt.show()

import pandas as pd
from sklearn.decomposition import NMF
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import numpy as np
import matplotlib.pyplot as plt



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply NMF (this step is optional for Random Forest, but we'll keep it here)
n_components = 5
nmf_model = NMF(n_components=n_components, random_state=42)
W_train = nmf_model.fit_transform(X_train)
W_test = nmf_model.transform(X_test)


rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(W_train, y_train)

# Predict the classes for the test set
y_pred = rf_classifier.predict(W_test)
